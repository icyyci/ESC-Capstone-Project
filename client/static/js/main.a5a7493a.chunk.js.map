{"version":3,"sources":["Components/Floor 1.png","Components/Floor 2.png","logo.svg","Components/MapPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","style","display","alignItems","justifyContent","border","background","MapPage","state","url","width","height","x","y","listOfRectangles","groupNo","listOfGroups","buttons","screenCapture","open","title","handleOnClick","text","console","log","split","join","toLowerCase","setState","axios","post","request","group","then","res","data","createRectangles","concat","default","onDragStop","e","d","onResize","direction","ref","delta","position","offsetWidth","offsetHeight","handleConfirmAllocation","requestJson","window","location","host","this","src","floor1","floor2","map","Button","onClick","Component","App","className","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a5a7493a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Floor 1.c48ea811.png\";","module.exports = __webpack_public_path__ + \"static/media/Floor 2.36437e89.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport floor1 from './Floor 1.png';\r\nimport floor2 from './Floor 2.png';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Rnd } from \"react-rnd\";\r\nimport ReactCrop from 'react-image-crop';\r\nimport axios from 'axios';\r\n\r\nconst style = {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    border: \"solid 1px #ddd\",\r\n    background: \"#ffcff0\",\r\n  };\r\n  \r\nexport class MapPage extends Component {\r\n\r\n    state={\r\n        url: \"\",\r\n        width: 500,\r\n        height: 400,\r\n        x: 0,\r\n        y: 0,\r\n        listOfRectangles: [],\r\n        groupNo: \"\",\r\n        listOfGroups: [],\r\n        buttons: [],\r\n        //screen capture\r\n        screenCapture: \"\",\r\n        open: false,\r\n        title: \"gimmeatitle\"\r\n\r\n    }\r\n\r\n    handleOnClick = (text) => {\r\n        //axios.get  x,y, width, height,grpNo\r\n        console.log(\"grp clicked\");\r\n        var text = text.split(\" \").join(\"\").toLowerCase();\r\n        this.setState({groupNo:text});\r\n        axios.post(this.state.url, {request: \"data\", group: text}).then((res => {\r\n            console.log(res.data);\r\n            this.setState({x: res.data.x});\r\n            this.setState({y: res.data.y});\r\n            this.setState({width: res.data.width});\r\n            this.setState({height: res.data.height});\r\n        })).then(() => {\r\n            console.log(\"retrieved data, creating rectangle\");\r\n            this.createRectangles(text);\r\n        })\r\n    }\r\n\r\n    createRectangles = (text) => {  \r\n        console.log(this.state.x);\r\n        console.log(this.state.y);\r\n        this.setState({\r\n        listOfRectangles: this.state.listOfRectangles.concat(\r\n            <Rnd\r\n            style={style}\r\n            default={{\r\n                x: this.state.x,\r\n                y: this.state.y,\r\n                width: this.state.width,\r\n                height: this.state.height,\r\n            }}\r\n            onDragStop={(e, d) => { this.setState({ x: d.x, y: d.y }) }}\r\n            onResize={(e, direction, ref, delta, position) => {\r\n                this.setState({\r\n                width: ref.offsetWidth,\r\n                height: ref.offsetHeight,\r\n                ...position,\r\n                });\r\n            }}\r\n            >\r\n            {text}\r\n            </Rnd>\r\n        ),\r\n        });\r\n\r\n    }\r\n\r\n    handleConfirmAllocation = () => {\r\n        //post x,y,width,height to server\r\n        var requestJson = {request: \"confirm\",\r\n            group: this.state.groupNo,\r\n            x: this.state.x,\r\n            y: this.state.y,\r\n            width: this.state.width,\r\n            height: this.state.height\r\n        }\r\n        axios.post(this.state.url, requestJson).then(res => {\r\n            console.log(\"saved to database\");\r\n        })\r\n    }\r\n\r\n    render() {\r\n        //axios.get(listofgroups)\r\n        if (window.location.host == \"localhost:5000\") {\r\n            this.state.url = \"http://\" + window.location.host + \"/map\";\r\n        }\r\n        else {\r\n            this.state.url = \"https://\" + window.location.host + \"/map\";\r\n        }\r\n        axios.post(this.state.url, {request: \"firstload\"}).then((res) => {\r\n            //console.log(res.data);\r\n            this.setState({listOfGroups: res.data});\r\n        });\r\n        //console.log(this.state.x);\r\n        //console.log(this.state.y);\r\n        return (\r\n            <div>\r\n                {this.state.listOfRectangles}\r\n                <img src={floor1} ></img>\r\n                <img src={floor2}></img>\r\n                <br></br>\r\n                <div>\r\n                    {this.state.listOfGroups.map((text) => (\r\n                        <Button onClick={() => {this.handleOnClick(text)}}>\r\n                            {text}\r\n                        </Button>\r\n                    ))}\r\n                </div>\r\n                <br/>\r\n\r\n                <Button onClick={this.handleConfirmAllocation}>Confirm Allocation</Button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapPage\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport mapPage, { MapPage } from './Components/MapPage';\n\n\nfunction App() {\n  return (\n    <div className=\"mapPage\">\n      <MapPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}