{"version":3,"sources":["Components/Floor 1.png","Components/Floor 2.png","logo.svg","Components/MapPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","style","display","alignItems","justifyContent","border","background","MapPage","state","url","listOfRectangles","listjson","x","y","width","height","Group","handleonClick","temp","i","length","push","default","disableDragging","enableResizing","setState","window","location","host","this","axios","post","request","then","res","console","log","data","src","floor1","floor2","Button","onClick","Component","App","className","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,uNCOrCC,EAAQ,CACVC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,iBACRC,WAAY,WAGHC,EAAb,4MAEIC,MAAM,CACFC,IAAK,GACLC,iBAAkB,GAClBC,SAAS,CAAC,CAACC,EAAE,IAAIC,EAAE,IAAIC,MAAM,IAAIC,OAAO,IAAIC,MAAM,MAL1D,EASIC,cAAgB,WAEZ,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAI,EAAKX,MAAMG,SAASS,OAAQD,IAC5CD,EAAKG,KACD,kBAAC,IAAD,CACApB,MAAOA,EACPqB,QAAS,CACLV,EAAG,EAAKJ,MAAMG,SAASQ,GAAGP,EAC1BC,EAAG,EAAKL,MAAMG,SAASQ,GAAGN,EAC1BC,MAAO,EAAKN,MAAMG,SAASQ,GAAGL,MAC9BC,OAAQ,EAAKP,MAAMG,SAASQ,GAAGJ,QAEnCQ,iBAAiB,EAAMC,gBAAgB,GAEtC,EAAKhB,MAAMG,SAASQ,GAAGH,QAIhC,EAAKS,SAAS,CAACf,iBAAiBQ,KA3BxC,uDA8Bc,IAAD,OAWL,MAV4B,kBAAxBQ,OAAOC,SAASC,KAChBC,KAAKrB,MAAMC,IAAM,UAAYiB,OAAOC,SAASC,KAAO,mBAGpDC,KAAKrB,MAAMC,IAAM,WAAaiB,OAAOC,SAASC,KAAO,mBAEzDE,IAAMC,KAAKF,KAAKrB,MAAMC,IAAK,CAACuB,QAAS,cAAcC,MAAM,SAAAC,GACrDC,QAAQC,IAAIF,EAAIG,MAChB,EAAKZ,SAAS,CAACd,SAAUuB,EAAIG,UAG7B,6BACKR,KAAKrB,MAAME,iBACZ,yBAAK4B,IAAKC,MACV,yBAAKD,IAAKE,MACV,kBAACC,EAAA,EAAD,CAAQC,QAASb,KAAKZ,eAAtB,iBA9ChB,GAA6B0B,aCDdC,MARf,WACE,OACE,yBAAKC,UAAU,WACb,kBAAC,EAAD,QCGcC,QACW,cAA7BpB,OAAOC,SAASoB,UAEe,UAA7BrB,OAAOC,SAASoB,UAEhBrB,OAAOC,SAASoB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.9f764d27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Floor 1.c48ea811.png\";","module.exports = __webpack_public_path__ + \"static/media/Floor 2.36437e89.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport floor1 from './Floor 1.png'\nimport floor2 from './Floor 2.png'\nimport Button from '@material-ui/core/Button';\nimport { Rnd } from \"react-rnd\";\nimport axios from 'axios';\n\nconst style = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    border: \"solid 1px #ddd\",\n    background: \"#ffcff0\",\n  };\n  \nexport class MapPage extends Component {\n\n    state={\n        url: \"\",\n        listOfRectangles: [],\n        listjson:[{x:100,y:500,width:500,height:400,Group:12}], //{x:,y:,width:,height:,grpno:}\n    }\n\n\n    handleonClick = () => {\n        var temp = [];\n        for (var i = 0; i < this.state.listjson.length; i++){\n            temp.push(\n                <Rnd\n                style={style}\n                default={{\n                    x: this.state.listjson[i].x,\n                    y: this.state.listjson[i].y,\n                    width: this.state.listjson[i].width,\n                    height: this.state.listjson[i].height,\n                }}\n                disableDragging={true} enableResizing={false}\n                >\n                {this.state.listjson[i].Group}\n                </Rnd>\n            )\n        }\n        this.setState({listOfRectangles:temp});\n    }\n\n    render() {\n        if (window.location.host == \"localhost:5000\") {\n            this.state.url = \"http://\" + window.location.host + \"/groupallocation\";\n        }\n        else {\n            this.state.url = \"https://\" + window.location.host + \"/groupallocation\";\n        }\n        axios.post(this.state.url, {request: \"firstload\"}).then (res => {\n            console.log(res.data);\n            this.setState({listjson: res.data});\n        })\n        return (\n            <div>\n                {this.state.listOfRectangles}\n                <img src={floor1} ></img>\n                <img src={floor2}></img>\n                <Button onClick={this.handleonClick}>Load Map</Button>\n            </div>\n        )\n    }\n}\n\nexport default MapPage\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport mapPage, { MapPage } from './Components/MapPage';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"mapPage\">\r\n      <MapPage/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}